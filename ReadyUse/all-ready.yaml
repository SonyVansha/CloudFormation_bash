Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 175.20.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: lksvpc

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: lksigw

# Attachment IGW to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Subnet Public From VPC
  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 175.20.0.0/25
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet1-a

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 175.20.0.128/25
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet2-b

# Create Subnet Private From VPC
  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 175.20.1.0/26
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet1-a

  SubnetPrivate2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: 175.20.1.64/26
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: private-subnet2-b

# Create allocation IP
  AllocationIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

# Create Nat Gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AllocationIP.AllocationId
      SubnetId: !Ref SubnetPublic1

# Create Route Table Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: lkspublic

# Masukan IGW to Routes table public
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

# Register Subnet Public to Route Table Public
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2

##########################

# Create Route Table Private
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: lksprivate

# Masukan Nat Gateway ke Route Private
  DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref MyNatGateway

# Regrister Subnet Private to Route Table Private
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivate1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivate2


# create Security Group Load Balancer and Instance
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG-LB
      GroupDescription: Allow inbound traffic on port 80 and 443 for Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SG-Apps
      GroupDescription: create Apps Instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

# Create Instance
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0e8a34246278c21e4
      KeyName: keysony
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetPrivate1
      UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              printf "Step 1 Install Httpd"
              sudo su
              yum install httpd -y 
              printf "Step 2 Start Httpd"
              systemctl start httpd
              systemctl enable httpd
              printf "Step 3 create index"
              echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
              printf "Step 4 success yes"
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: Name
        Value: lksapp1a

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0e8a34246278c21e4
      KeyName: keysony
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetPrivate2
      UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              printf "Step 1 Install Httpd"
              sudo su
              yum install httpd -y 
              printf "Step 2 Start Httpd"
              systemctl start httpd
              systemctl enable httpd
              printf "Step 3 create index"
              echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
              printf "Step 4 success yes"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: lksapp1b

# Create Target Group and Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TG-LB
      TargetType: instance
      Protocol: HTTP
      Port: 80  # Jangan Lupa
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
      Tags:
        - Key: Name
          Value: TG-Group

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LB-1
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: LoadBalancer-TG

  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup